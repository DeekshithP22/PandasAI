from fastapi import FastAPI, Request, Form
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
import os
from langchain_openai import AzureChatOpenAI
from langchain_community.agent_toolkits import create_sql_agent
from langchain_openai import AzureOpenAIEmbeddings
from langchain_community.utilities import SQLDatabase
from langchain_community.vectorstores import FAISS
from langchain_core.example_selectors import SemanticSimilarityExampleSelector
from langchain_core.prompts import (
    ChatPromptTemplate,
    FewShotPromptTemplate,
    MessagesPlaceholder,
    PromptTemplate,
    SystemMessagePromptTemplate,
)

app = FastAPI()
templates = Jinja2Templates(directory="templates")

api_key = os.getenv("OPENAI_API_KEY")
azure_endpoint = os.getenv("OPENAI_ENDPOINT")
api_version = os.getenv("OPENAI_API_VERSION")

db = SQLDatabase.from_uri("sqlite:///Job_Dataset.db")

llm = AzureChatOpenAI(
    model=os.getenv("OPENAI_MODEL"),
    azure_deployment=os.getenv("OPENAI_STRUCT_DEPLOYMENT"),
    api_key=api_key,
    azure_endpoint=azure_endpoint,
    api_version=api_version,
    temperature=0,
)

embed_model = AzureOpenAIEmbeddings(
    model=os.getenv("OPENAI_EMBEDDING_MODEL"),
    azure_deployment= os.getenv("OPENAI_EMBEDDING_DEPLOYMENT_NAME"),
    api_key=api_key,
    azure_endpoint=azure_endpoint,
    api_version=api_version,
)

examples = [
    {"input": "Job Title trend over years", 
     "query": "SELECT YEAR(Date) AS Year, Job Title, COUNT(*) AS Job_Count FROM Job_Dataset GROUP BY YEAR(Date). Job Title ORDER BY Year, Job_Count;"
    },
    {
        "input": "Job Title trend over location.",
        "query": "SELECT YEAR(Date) AS YEAR, Location, Job Title, COUNT(*) AS Job_Count FROM Job_Dataset GROUP BY YEAR(Date), Location, Job Title ORDER BY Year, Location, Job_Count DESC;",
    },
]

example_selector = SemanticSimilarityExampleSelector.from_examples(
    examples,
    embed_model,
    FAISS,
    k=2,
    input_keys=["input"],
)

system_prefix = """You are an agent designed to interact with a SQL database.
Given an input question, create a syntactically correct {dialect} query to run, then look at the results of the query and return the answer.
Unless the user specifies a specific number of examples they wish to obtain, always limit your query to at most {top_k} results.
You can order the results by a relevant column to return the most interesting examples in the database.
Never query for all the columns from a specific table, only ask for the relevant columns given the question.
You have access to tools for interacting with the database.
Only use the given tools. Only use the information returned by the tools to construct your final answer.
You MUST double check your query before executing it. If you get an error while executing a query, rewrite the query and try again.

DO NOT make any DML statements (INSERT, UPDATE, DELETE, DROP etc.) to the database.

If the question does not seem related to the database, just return "I don't know" as the answer.

Here are some examples of user inputs and their corresponding SQL queries:"""

few_shot_prompt = FewShotPromptTemplate(
    example_selector=example_selector,
    example_prompt=PromptTemplate.from_template(
        "User input: {input}\nSQL query: {query}"
    ),
    input_variables=["input", "dialect", "top_k"],
    prefix=system_prefix,
    suffix="",
)

full_prompt = ChatPromptTemplate.from_messages(
    [
        SystemMessagePromptTemplate(prompt=few_shot_prompt),
        ("human", "{input}"),
        MessagesPlaceholder("agent_scratchpad"),
    ]
)

agent = create_sql_agent(
    llm=llm,
    db=db,
    prompt=full_prompt,
    verbose=True,
    agent_type="openai-tools",
)


@app.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("index.html", {"request": request})


@app.post("/ask/", response_class=HTMLResponse)
async def ask_question(request: Request, question: str = Form(...)):
    response = agent.invoke({"input": question})
    return templates.TemplateResponse("index.html", {"request": request, "response": response})


if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="127.0.0.1", port=8000)



index.html


<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Ask a Question</title>
</head>
<body>
    <h1>Ask a Question</h1>
    <form action="/ask/" method="post">
        <label for="question">Question:</label><br>
        <input type="text" id="question" name="question"><br><br>
        <button type="submit">Ask</button>
    </form>
    {% if response %}
        <h2>Response:</h2>
        <p>{{ response }}</p>
    {% endif %}
</body>
</html>
