import pandas as pd

# Assuming your DataFrame is named 'df'
# Extracting all skills mentioned in the Skills_Required column
all_skills = df['Skills_Required'].str.split(', ').explode().str.strip()

# Calculating value counts for each skill
skill_counts = all_skills.value_counts()

# Selecting top 5 skills
top_skills = skill_counts.head(5)

# Updating the dictionary
pie_chart = {
    'labels': top_skills.index.tolist(),
    'datasets': [{'label': 'Top Skills', 'data': top_skills.values.tolist()}]
}

print(pie_chart)


import re

# Extracting all skills mentioned in the Skills_Required column using regular expressions
all_skills = df['Skills_Required'].str.split(r', |; |\*|\n| ').explode().str.strip()

# Calculating value counts for each skill
skill_counts = all_skills.value_counts()

# Selecting top 5 skills
top_skills = skill_counts.head(5)

# Updating the dictionary
pie_chart = {
    'labels': top_skills.index.tolist(),
    'datasets': [{'label': 'Top Skills', 'data': top_skills.values.tolist()}]
}

print(pie_chart)







# Filter the DataFrame to include only rows where the top skills are mentioned
top_skills_jobs = df[df['Skills_Required'].str.contains('|'.join(top_skills.index), na=False)]

# Count the number of job postings for each skill
skill_postings_count = top_skills_jobs['Skills_Required'].str.split(', ').explode().value_counts()

# Updating the dictionary for bar chart
bar_chart = {
    'labels': skill_postings_count.index.tolist(),
    'datasets': [{'label': 'Job Postings', 'data': skill_postings_count.values.tolist()}]
}

print(bar_chart)
















# Filtering the DataFrame to include only rows where the top skills are mentioned
top_skills_jobs = df[df['Skills_Required'].str.split(', ').explode().isin(top_skills.index)]

# Counting the number of job postings for each skill
top_skills_postings = top_skills_jobs['Skills_Required'].str.split(', ').explode().value_counts()

# Updating the bar chart dictionary
bar_chart = {
    'labels': top_skills_postings.index.tolist(),
    'datasets': [{'label': 'Job Postings', 'data': top_skills_postings.values.tolist()}]
}

print(bar_chart)


# Filtering the DataFrame to include only rows where the top skills are mentioned
top_skills_jobs = df[df['Skills_Required'].str.split(', ').explode().isin(top_skills.index)]

# Check if top_skills_jobs DataFrame is not empty
if not top_skills_jobs.empty:
    # Counting the number of job postings for each skill
    top_skills_postings = top_skills_jobs['Skills_Required'].str.split(', ').explode().value_counts()

    # Check if top_skills_postings Series is not empty
    if not top_skills_postings.empty:
        # Updating the bar chart dictionary
        bar_chart = {
            'labels': top_skills_postings.index.tolist(),
            'datasets': [{'label': 'Job Postings', 'data': top_skills_postings.values.tolist()}]
        }
        print(bar_chart)
    else:
        print("No job postings found for top skills.")
else:
    print("No rows found for top skills.")


























# Assuming 'Date' column is in datetime format, if not convert it to datetime format
df['Date'] = pd.to_datetime(df['Date'])

# Extracting month and year from the 'Date' column
df['Month'] = df['Date'].dt.to_period('M')

# Filtering the DataFrame for the top skills
top_skills_jobs = df[df['Skills_Required'].str.split(', ').explode().isin(top_skills.index)]

# Counting the number of job postings for each month and skill
monthly_skill_counts = top_skills_jobs.groupby(['Month', 'Skills_Required']).size().unstack(fill_value=0)

# Updating the line chart dictionary
line_chart = {
    'labels': monthly_skill_counts.index.strftime('%Y-%m').tolist(),  # Convert period index to string format
    'datasets': [{'label': skill, 'data': monthly_skill_counts[skill].tolist()} for skill in monthly_skill_counts.columns]
}

print(line_chart)



























# Filter the DataFrame to include only rows where the top 5 skills are mentioned
top_skills_jobs = df[df['Skills_Required'].str.contains('|'.join(top_skills_list), na=False)]

# Convert the 'Date' column to datetime format
top_skills_jobs['Date'] = pd.to_datetime(top_skills_jobs['Date'])

# Extract month and year from the 'Date' column
top_skills_jobs['Month'] = top_skills_jobs['Date'].dt.to_period('M')

# Group by month and skill, and count the number of job postings
monthly_skill_postings = top_skills_jobs.groupby(['Month', 'Skills_Required']).size().unstack(fill_value=0)

# Keep only the top 5 skills columns
monthly_skill_postings = monthly_skill_postings[top_skills_list]

# Convert to dictionary for line chart
line_chart = {
    'labels': monthly_skill_postings.index.strftime('%Y-%m').tolist(),
    'datasets': [{'label': skill, 'data': monthly_skill_postings[skill].tolist()} for skill in monthly_skill_postings.columns]
}

print(line_chart)




# Initialize an empty DataFrame to store the filtered rows
filtered_df = pd.DataFrame()

# Iterate over each top skill
for skill in top_skills_list:
    # Create a boolean mask for rows where the current skill is mentioned
    mask = df['Skills_Required'].str.contains(skill, na=False)
    # Append the rows matching the current skill to the filtered DataFrame
    filtered_df = filtered_df.append(df[mask])

# Reset the index of the filtered DataFrame
filtered_df.reset_index(drop=True, inplace=True)

# Print the filtered DataFrame
print(filtered_df)














# Initialize an empty DataFrame to store the filtered rows
filtered_df = pd.DataFrame()

# Iterate over each top skill
for skill in top_skills_list:
    # Create a boolean mask for rows where the current skill is mentioned
    mask = df['Skills_Required'].str.contains(skill, na=False)
    # Append the rows matching the current skill to the filtered DataFrame
    filtered_df = filtered_df.append(df[mask])

    # Drop duplicate rows
    filtered_df = filtered_df.drop_duplicates()

# Reset the index of the filtered DataFrame
filtered_df.reset_index(drop=True, inplace=True)

# Print the filtered DataFrame
print(filtered_df)






# Convert the list of current skills to lowercase
current_skills = [skill.lower() for skill in current_skills]

# Initialize an empty DataFrame to store the filtered rows
filtered_df = pd.DataFrame()

# Iterate over each current skill
for skill in current_skills:
    # Create a boolean mask for rows where the current skill is mentioned
    mask = df['Skills_Required'].str.lower().str.contains(skill, na=False)
    # Append the rows matching the current skill to the filtered DataFrame
    filtered_df = filtered_df.append(df[mask])

# Convert the 'Date' column to datetime format
filtered_df['Date'] = pd.to_datetime(filtered_df['Date'])

# Extract month and year from the 'Date' column
filtered_df['Month'] = filtered_df['Date'].dt.to_period('M')

# Group by month, skill, and year, and count the number of job postings
monthly_skill_postings = filtered_df.groupby(['Month', 'Skills_Required']).size().unstack(fill_value=0)

# Keep only the top 5 skills columns
monthly_skill_postings = monthly_skill_postings[top_skills_list]

# Convert to dictionary for line chart
line_chart = {
    'labels': monthly_skill_postings.index.strftime('%Y-%m').tolist(),
    'datasets': [{'label': skill, 'data': monthly_skill_postings[skill].tolist()} for skill in monthly_skill_postings.columns]
}

print(line_chart)







# Initialize an empty dictionary to store monthly job postings for each top skill
monthly_job_postings = {}

# Iterate over each top skill
for skill in top_skills_list:
    # Filter the DataFrame to include only rows where the current skill is mentioned
    skill_jobs = filtered_df[filtered_df['Skills_Required'].str.lower().str.contains(skill)]

    # Convert the 'Date' column to datetime format
    skill_jobs['Date'] = pd.to_datetime(skill_jobs['Date'])

    # Extract month and year from the 'Date' column
    skill_jobs['Month'] = skill_jobs['Date'].dt.to_period('M')

    # Group by month and count the number of job postings
    monthly_counts = skill_jobs.groupby('Month').size()

    # Store the monthly job postings for the current skill
    monthly_job_postings[skill] = monthly_counts

# Initialize an empty DataFrame to store the aggregated monthly job postings for the top 5 skills
aggregated_monthly_job_postings = pd.DataFrame()

# Concatenate the monthly job postings for the top 5 skills into a single DataFrame
for skill, monthly_counts in monthly_job_postings.items():
    aggregated_monthly_job_postings[skill] = monthly_counts

# Fill missing values with 0
aggregated_monthly_job_postings.fillna(0, inplace=True)

# Convert to dictionary for line chart
line_chart = {
    'labels': aggregated_monthly_job_postings.index.strftime('%Y-%m').tolist(),
    'datasets': [{'label': skill, 'data': aggregated_monthly_job_postings[skill].tolist()} for skill in aggregated_monthly_job_postings.columns]
}

print(line_chart)
































# Initialize an empty dictionary to store monthly job postings for each top skill
monthly_job_postings = {}

# Iterate over each top skill
for skill in top_skills_list:
    # Filter the DataFrame to include only rows where the current skill is mentioned
    skill_jobs = filtered_df[filtered_df['Skills_Required'].str.lower().str.contains(skill)]

    # Convert the 'Date' column to datetime format
    skill_jobs['Date'] = pd.to_datetime(skill_jobs['Date'])

    # Extract month and year from the 'Date' column
    skill_jobs['Month'] = skill_jobs['Date'].dt.to_period('M')

    # Group by month and count the number of job postings
    monthly_counts = skill_jobs.groupby('Month').size()

    # Store the monthly job postings for the current skill
    monthly_job_postings[skill] = monthly_counts

# Initialize an empty DataFrame to store the aggregated monthly job postings for the top 5 skills
aggregated_monthly_job_postings = pd.DataFrame()

# Concatenate the monthly job postings for the top 5 skills into a single DataFrame
for skill, monthly_counts in monthly_job_postings.items():
    aggregated_monthly_job_postings[skill] = monthly_counts

# Fill missing values with 0
aggregated_monthly_job_postings.fillna(0, inplace=True)

# Convert index to string format
aggregated_monthly_job_postings.index = aggregated_monthly_job_postings.index.astype(str)

# Convert to dictionary for line chart
line_chart = {
    'labels': aggregated_monthly_job_postings.index.tolist(),
    'datasets': [{'label': skill, 'data': aggregated_monthly_job_postings[skill].tolist()} for skill in aggregated_monthly_job_postings.columns]
}

print(line_ch



























# Initialize an empty list to store labels (months)
labels = []

# Initialize an empty list to store data (counts of job postings)
data = []

# Iterate over each top skill
for skill in top_skills_list:
    # Filter the DataFrame to include only rows where the current skill is mentioned
    skill_jobs = filtered_df[filtered_df['Skills_Required'].str.lower().str.contains(skill)]

    # Convert the 'Date' column to datetime format
    skill_jobs['Date'] = pd.to_datetime(skill_jobs['Date'])

    # Extract month and year from the 'Date' column
    skill_jobs['Month'] = skill_jobs['Date'].dt.to_period('M')

    # Group by month and count the number of job postings
    monthly_counts = skill_jobs.groupby('Month').size()

    # Store the counts of job postings
    data.extend(monthly_counts.tolist())

    # Store the month labels
    labels.extend(monthly_counts.index.strftime('%Y-%m'))

# Convert to dictionary for line chart
line_chart = {
    'labels': labels,
    'datasets': [{'label': skill, 'data': data} for skill in top_skills_list]
}

print(line_chart)

